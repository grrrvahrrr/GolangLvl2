package main

import (
	"math/rand"
	"strconv"
	"time"

	. "github.com/dave/jennifer/jen"
)

func main() {
	rand.Seed(time.Now().UnixNano())
	generateTest(5)
}

func generateTest(testNum int) {
	f := NewFile("main")
	f.HeaderComment("Code generated by Machine, Do not edit")

	for i := 0; i < testNum; i++ {
		l := rand.Intn(4)
		w := rand.Float64() * 100
		var r bool
		if rand.Intn(1) == 1 {
			r = true
		} else {
			r = false
		}
		n := randSeq(5)
		v := randSeq(10)
		funcName := "TestProcessAnimal" + strconv.Itoa(i)

		f.Func().Id(funcName).Params(Id("t *testing.T")).Block(
			Id("valuesMap").Op(":=").Map(String()).Interface().Values(Dict{
				Lit("Name"):   Lit(n),
				Lit("Legs"):   Lit(l),
				Lit("Weight"): Lit(w),
				Lit("Voice"):  Lit(v),
				Lit("Roar"):   Lit(r),
			}),
			Var().Id("cat").Op("Animal"),
			If(
				Err().Op(":=").Id("processAnimal").Call(Id("cat"), Id("valuesMap")),
				Err().Op("!=").Nil(),
			).Block(
				Qual("log", "Println").Call(Err()),
			),
		)
	}

	f.Save("gen_test.go")

}

func randSeq(n int) string {
	var letters = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
	b := make([]rune, n)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}
